services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: myapp_mysql_prod
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "127.0.0.1:3306:3306" # Bind to localhost only for security
    volumes:
      - mysql_prod_data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: myapp_backend_prod
    ports:
      - "127.0.0.1:8000:8000" # Bind to localhost only
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=mysql
      - DB_PORT=3306
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT}
      - SECURE_PROXY_SSL_HEADER=${SECURE_PROXY_SSL_HEADER}
    depends_on:
      - mysql
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./backend/logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: myapp_frontend_prod
    ports:
      - "127.0.0.1:3000:80" # Bind to localhost only
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.testingonvps.online
    restart: unless-stopped
    networks:
      - app-network

volumes:
  mysql_prod_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge
